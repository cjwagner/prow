function parseQuery(e){const t={};for(const[s,n]of e.split("&").map(e=>e.split("=").map(unescape)))t[s]=n;return t}function isBaseMessage(e){return"string"==typeof e.type}function isResponse(e){return isBaseMessage(e)&&"response"===e.type}function isTransitMessage(e){return"number"==typeof e.id&&e.message&&"string"==typeof e.message.type}function isUpdateHashMessage(e){return isBaseMessage(e)&&"updateHash"===e.type}function serialiseHashes(e){return Object.keys(e).map(t=>`${t}:${escape(e[t].substr(1))}`).join(";")}var __awaiter=window&&window.__awaiter||function(e,t,s,n){return new(s||(s=Promise))((function(i,a){function o(e){try{h(n.next(e))}catch(e){a(e)}}function r(e){try{h(n.throw(e))}catch(e){a(e)}}function h(e){e.done?i(e.value):function t(e){return e instanceof s?e:new s((function(t){t(e)}))}(e.value).then(o,r)}h((n=n.apply(e,t||[])).next())}))};const linkRegex=/((?:href|src)=")?(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gi;class SpyglassImpl{constructor(){this.pendingRequests=new Map,this.messageId=0,this.pendingUpdateTimer=0,this.currentHash="",this.currentHash=location.hash,this.observer=new MutationObserver(e=>this.handleMutations(e)),window.addEventListener("message",e=>this.handleMessage(e)),window.addEventListener("hashchange",e=>this.handleHashChange(e)),window.addEventListener("DOMContentLoaded",()=>{this.createHyperlinks(document.documentElement),this.fixAnchorLinks(document.documentElement),this.observer.observe(document.documentElement,{attributeFilter:["href"],childList:!0,subtree:!0})}),window.addEventListener("load",()=>{this.contentUpdated(),setTimeout(()=>{""!==location.hash&&this.tryMoveToHash(location.hash)},100)})}updatePage(e){return __awaiter(this,void 0,void 0,(function*(){yield this.postMessage({type:"updatePage",data:e}),this.contentUpdated()}))}requestPage(e){return __awaiter(this,void 0,void 0,(function*(){return(yield this.postMessage({type:"requestPage",data:e})).data}))}request(e){return __awaiter(this,void 0,void 0,(function*(){return(yield this.postMessage({type:"request",data:e})).data}))}contentUpdated(){this.updateHeight(),clearTimeout(this.pendingUpdateTimer),this.pendingUpdateTimer=setTimeout(()=>this.updateHeight(),0)}makeFragmentLink(e){const t=parseQuery(location.search.substr(1));return"#"!==e[0]&&(e="#"+e),`${t.topURL}#${serialiseHashes({[t.lensIndex]:e})}`}scrollTo(e,t){return __awaiter(this,void 0,void 0,(function*(){yield this.postMessage({type:"showOffset",left:e,top:t})}))}updateHeight(){this.postMessage({type:"contentUpdated",height:document.body.offsetHeight}).then()}postMessage(e){return new Promise((t,s)=>{const n=++this.messageId;this.pendingRequests.set(n,t),window.parent.postMessage({id:n,message:e},document.location.origin)})}handleMessage(e){if(e.origin!==document.location.origin)return void console.warn(`Got MessageEvent from unexpected origin ${e.origin}; expected ${document.location.origin}`,e);const t=e.data;isTransitMessage(t)?isResponse(t.message)&&this.pendingRequests.has(t.id)&&(this.pendingRequests.get(t.id)(t.message),this.pendingRequests.delete(t.id)):isUpdateHashMessage(t)&&(location.hash=t.hash)}handleMutations(e){for(const t of e)if(t.target instanceof HTMLElement)if("childList"===t.type)this.fixAnchorLinks(t.target),t.target instanceof HTMLDivElement&&(t.target.classList.contains("shown")||t.target.classList.contains("loglines"))&&this.createHyperlinks(t.target);else if("attributes"===t.type&&t.target instanceof HTMLAnchorElement&&"href"===t.attributeName){const e=t.target.getAttribute("href");e&&"#"===e[0]&&this.fixAnchorLink(t.target)}}handleHashChange(e){location.hash!==this.currentHash&&(this.currentHash=location.hash,this.postMessage({type:"updateHash",hash:location.hash}).then(),this.tryMoveToHash(location.hash))}tryMoveToHash(e){e=e.substr(1);let t=document.getElementById(e);if(!t&&!(t=document.getElementsByName(e)[0]))return;const s=t.getBoundingClientRect().top+window.pageYOffset;this.scrollTo(0,s).then()}setLink(e,t){return void 0!==t?e:`</span><a target="_blank" href="${e}">${e}</a><span>`}createHyperlinks(e){for(const t of Array.from(e.querySelectorAll("div.linetext>span")))this.createHyperlink(t)}createHyperlink(e){e.innerText.match(linkRegex)&&(e.innerHTML=e.innerText.replace(linkRegex,this.setLink))}fixAnchorLinks(e){for(const t of Array.from(e.querySelectorAll('a[href^="#"]')))this.fixAnchorLink(t)}fixAnchorLink(e){e.dataset.preserveAnchor||(e.href=location.href.split("#")[0]+e.getAttribute("href"),e.target="_self")}}const spyglass=new SpyglassImpl;window.spyglass=spyglass;